
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @map("_id")
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  username         String?
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  timezone         String?
  language         String?
  urls             String[]
  pronouns         String?
  bio              String?

  @@unique([email])
  @@unique([username])
  @@map("user")
  Session Session[]
  Account Account[]
  Invitation Invitation[]
  TwoFactor TwoFactor[]
  Passkey Passkey[]
  Ticket Ticket[]
}

model Session {
  id                   String   @id @map("_id")
  expiresAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?
  impersonatedBy       String?

  @@map("session")
}

model Account {
  id           String    @id @map("_id")
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

model Organization {
  id        String   @id @map("_id")
  name      String
  slug      String?
  logo      String?
  createdAt DateTime
  metadata  String?

  @@unique([slug])
  @@map("organization")
  Member Member[]
  Invitation Invitation[]
}

model Member {
  id             String       @id @map("_id")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id @map("_id")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model TwoFactor {
  id          String @id @map("_id")
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Passkey {
  id             String    @id @map("_id")
  name           String?
  publicKey      String
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  webauthnUserID String
  counter        Int
  deviceType     String
  backedUp       Boolean
  transports     String?
  createdAt      DateTime?

  @@map("passkey")
}

model Ticket {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  userId      String
  category    String
  priority    String   // New field for ticket priority
  subject     String
  message     String
  attachments Json?   // Store file names or URLs as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ticket")
}
